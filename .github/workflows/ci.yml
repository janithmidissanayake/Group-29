name: Automated Testing Workflow
on:
  push:
    branches: 
      - test-all
  pull_request:
    branches: 
      - test-all
  workflow_dispatch:  

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  complete_testing:
    name: UI and API Testing Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    
    - name: Configure Java Development Kit
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Prepare Test Results Directories
      run: |
        mkdir -p API_Testing/target/test-results
        mkdir -p UI_Testing/target/test-results
        chmod -R 777 API_Testing/target
        chmod -R 777 UI_Testing/target
    
    - name: Install Chrome Browser
      run: |
        sudo mkdir -p /etc/apt/sources.list.d
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /etc/apt/keyrings/google-chrome.gpg
        echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install google-chrome-stable -y
    
    - name: Configure ChromeDriver
      uses: nanasess/setup-chromedriver@master
      
    - name: Initialize Chrome Environment
      run: |
        export DISPLAY=:99
        chromedriver --version
        google-chrome --version
        sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        
    - name: Verify Chrome Installation
      run: |
        which google-chrome
        google-chrome --version
        which chromedriver
        chromedriver --version
    
    - name: Launch API Application
      working-directory: API_Testing
      run: |
        nohup java -jar demo-0.0.1-SNAPSHOT.jar &
        echo $! > ./app.pid
        timeout 60 bash -c 'while ! nc -z localhost 7081; do sleep 1; done'
        echo "API Application is now running"
        sleep 15

    - name: Fix SLF4J Warning
      working-directory: API_Testing
      run: |
        echo "Adding SLF4J binding..."
        mvn dependency:copy -Dartifact=org.slf4j:slf4j-simple:1.7.36 -DoutputDirectory=target/dependency
        export CLASSPATH=$CLASSPATH:target/dependency/slf4j-simple-1.7.36.jar
    
    - name: Execute API Test Suite
      working-directory: API_Testing
      run: |
        echo "Starting API tests..."
        # Clean and compile
        mvn clean compile
        
        # Create testng.xml if it doesn't exist
        mkdir -p src/test/resources
        cat << EOF > src/test/resources/testing.xml
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
        <suite name="API Test Suite">
            <test name="API Tests">
                <classes>
                    <class name="com.group_29.api_testing.runner.CucumberRunnerTests"/>
                </classes>
            </test>
        </suite>
        EOF
        
        # Run tests with specific configuration
        mvn test \
          -Dtest=com.group_29.api_testing.runner.CucumberRunnerTests \
          -DfailIfNoTests=true \
          -Dsurefire.testng.debug=true \
          -Dcucumber.glue=com.group_29.api_testing.stepDefinitions \
          -Dcucumber.features=src/test/resources/features \
          -X
        
        echo "API Testing completed"
      continue-on-error: true
    
    - name: Execute UI Test Suite
      working-directory: UI_Testing
      run: |
        mvn test
        echo "UI Testing completed"
      continue-on-error: true
    
    - name: Compile Test Results
      if: always()
      run: |
        mkdir -p combined-test-results
        cp -r API_Testing/target/test-results/* combined-test-results/ || true
        cp -r UI_Testing/target/test-results/* combined-test-results/ || true
        echo "Combined Test Results:"
        ls -R combined-test-results/
    
    - name: Deploy Test Report
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./combined-test-results
        publish_branch: gh-pages
        force_orphan: true
    
    - name: Perform Cleanup
      if: always()
      run: |
        if [ -f API_Testing/app.pid ]; then
          echo "Stopping API application..."
          kill $(cat API_Testing/app.pid)
          rm API_Testing/app.pid
        fi
        echo "Cleaning up test directories..."
        rm -rf API_Testing/target/test-results || true
        rm -rf UI_Testing/target/test-results || true
        rm -rf combined-test-results || true
